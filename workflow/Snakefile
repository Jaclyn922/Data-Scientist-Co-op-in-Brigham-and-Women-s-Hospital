from pathlib import Path


OUT = Path(config.get('output_dir', '/d/docker/volumes/regep00/gen3/submissions/new/'))
TMP = Path(config.get('scratch_dir', 'tmp'))

TARGETS = [
    OUT/"dataset.csv",
    OUT/"study.csv",
    OUT/"subject.csv",
    OUT/"sample.csv",
    OUT/"aliquot.csv",    
]
rule: input: TARGETS

rule extract_sample:
    input:
    output: df=TMP/"samples.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_sample.py"

rule E_samplemap:
    input:
    output: df=TMP/"sample-map.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_samplemap.py"

rule extract_subject:
    input:
    output: df="tmp/subjects.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_subject.py"

rule extract_study:
    input:
    output: df="tmp/study.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_study.py"

rule extract_tissue:
    input:
    output: df="tmp/tissue.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_tissue.py"
    
rule extract_cohort:
    input:
    output: df="tmp/cohort.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_cohort.py"

rule extract_collections:
    input:
    output: df="tmp/collections.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_collections.py"

rule extract_sf:
    input:
    output: df="tmp/sf.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_sf.py"

rule extract_packages:
    input:
    output: df="tmp/packages.csv"
    conda: "envs/sqlalchemy.yaml"
    script: "scripts/python/extract_packages.py"

rule extract_datasets:
    input:
    output: df="tmp/datasets.csv"
    conda: "envs/redmine.yaml"
    script: "scripts/python/extract_datasets.py"
    
rule extract_chammps:
    input:
        datasets="tmp/datasets.csv",
        samples="tmp/samples.csv",
    output:
        samples="tmp/chammps-samples.csv",
        subjects="tmp/chammps-subjects.csv",
        datasets="tmp/chammps-datasets.csv",
    conda: "envs/redmine.yaml"
    script: "scripts/python/extract_chammps.py"

rule T_STUDY:
    input: studies="tmp/study.csv",
    output:
        studies=OUT/"study.{suffix}",
    script: "scripts/python/transform_studies.py"

rule transform_datasets:
    input: datasets="tmp/chammps-datasets.csv",
    output:
        datasets=OUT/"dataset.csv",
        freezes=OUT/"freeze.csv",
    script: "scripts/python/transform_experiments.py"

rule transform_subject:
    input:
        subjects="tmp/subjects.csv",
        cohort="tmp/cohort.csv",
        lims_subjects="tmp/subjects.csv",
    output:
        subjects=OUT/"subject.{suffix}",
    script: "scripts/python/transform_cases.py"

rule transform_cases:
    input:
        subjects="tmp/chammps-subjects.csv",
        # lims_subjects="tmp/subjects.csv",
    output: cases=OUT/"case.tsv",
    script: "scripts/python/transform_cases.py"

rule T_sample:
    input:
        samples=TMP/"samples.csv",
        cohort=TMP/"cohort.csv",
        sample_map=TMP/"sample-map.csv",
        samplefamilies=TMP/"sf.csv",
    output: samples=OUT/"sample.{suffix}",
    script: "scripts/python/transform_samples.py"

rule transform_aliquots:
    input: samples="tmp/chammps-samples.csv",
    output: aliquots=OUT/"aliquot.csv",
    script: "scripts/python/transform_aliquots.py"

rule T_submitted_methylation:
    input:
        datasets=TMP/"datasets.csv",
        md5sums=TMP/"submitted_methylation.md5",
        sample_map=TMP/"sample-map.csv",
        aliquots=OUT/"aliquot.csv",
        samples=OUT/"sample.{suffix}",
    output:
        df=OUT/"submitted_methylation/submitted_methylation.{suffix}",
        aliquots=OUT/"submitted_methylation/aliquot.{suffix}",
    script: "scripts/python/transform_submitted_methylation.py"

rule T_genotyping_array:
    input:
        datasets=TMP/"datasets.csv",
        md5sums=TMP/"genotyping_array.md5",
        sample_map=TMP/"sample-map.csv",
        aliquots=OUT/"aliquot.csv",
        samples=OUT/"sample.{suffix}",
    output:
        df=OUT/"genotyping_array/genotyping_array.{suffix}",
        aliquots=OUT/"genotyping_array/aliquot.{suffix}",

    script: "scripts/python/transform_genotyping_array.py"  

rule transform_aligned_read:
    input:
        md5sums="path/to/md5sums.csv",
        sample_table="/proj/regeps/regep00/studies/COPDGene/analyses/rejpz/freeze5_dbgap_submission/castaldi-freeze5-sample-table.pep.csv",
    output:
        df="path/to/output/aligned_read.{suffix}",
        aliquots="path/to/output/aliquots.{suffix}",
    script:
        "scripts/python/transform_aligned_read.py"



#rule etl_notebook:
#    input:
#        samples=rules.extract_sample.output.df,
#        study = rules.extract_study.output.df,
#        tissue = rules.extract_tissue.output.df,
#        cohort = rules.extract_cohort.output.df,
#        collections = rules.extract_collections.output.df,
#        sf = rules.extract_sf.output.df,
#        packages = rules.extract_packages.output.df,
#        datasets = rules.extract_datasets.output.df,
#    conda: "envs/cdnm-jupyter-python-3.7.6.yaml"
#    log: notebook=OUT"/etl_notebook.ipynb"
#    notebook: "../notebook/study-overview.ipynb"